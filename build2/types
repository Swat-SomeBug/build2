// file      : build2/types -*- C++ -*-
// copyright : Copyright (c) 2014-2016 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

#ifndef BUILD2_TYPES
#define BUILD2_TYPES

#include <tuple>
#include <vector>
#include <string>
#include <memory>           // unique_ptr, shared_ptr
#include <utility>          // pair, move()
#include <cstddef>          // size_t, nullptr_t
#include <cstdint>          // uint{8,16,32,64}_t, *_MIN, *_MAX
#include <istream>
#include <ostream>
#include <functional>       // function, reference_wrapper
#include <initializer_list>

#include <ios>           // ios_base::failure
#include <exception>     // exception
#include <stdexcept>     // logic_error, invalid_argument, runtime_error
#include <system_error>

#include <butl/path>
#include <butl/sha256>
#include <butl/process>
#include <butl/fdstream>
#include <butl/optional>
#include <butl/timestamp>
#include <butl/vector-view>

namespace build2
{
  // Commonly-used types.
  //
  using std::uint8_t;
  using std::uint16_t;
  using std::uint32_t;
  using std::uint64_t;

  using std::size_t;
  using std::nullptr_t;

  using std::pair;
  using std::tuple;
  using std::string;
  using std::function;
  using std::reference_wrapper;

  using std::initializer_list;

  using std::unique_ptr;
  using std::shared_ptr;
  using std::weak_ptr;

  using std::vector;
  using butl::vector_view; // <butl/vector-view>

  using strings = vector<string>;
  using cstrings = vector<const char*>;

  using std::istream;
  using std::ostream;

  // Exceptions. While <exception> is included, there is no using for
  // std::exception -- use qualified.
  //
  using std::logic_error;
  using std::invalid_argument;
  using std::runtime_error;
  using std::system_error;
  using io_error = std::ios_base::failure;

  // <butl/optional>
  //
  using butl::optional;
  using butl::nullopt;

  // <butl/path>
  //
  using butl::path;
  using butl::dir_path;
  using butl::basic_path;
  using butl::invalid_path;
  using butl::path_cast;

  // Absolute directory path. Note that for now we don't do any checking that
  // the path is in fact absolute.
  //
  // The idea is to have a different type that we automatically complete when
  // a (variable) value of this type gets initialized from untyped names. See
  // value_type<abs_dir_path> for details.
  //
  // Note that currently we also normalize and actualize the path. And we
  // leave empty path as is.
  //
  struct abs_dir_path: dir_path
  {
    using dir_path::dir_path;

    explicit
    abs_dir_path (dir_path d): dir_path (std::move (d)) {}
    abs_dir_path () = default;
  };

  using paths = std::vector<path>;
  using dir_paths = std::vector<dir_path>;

  // Path printing with trailing slash for directories (utility.cxx).
  //
  ostream&
  operator<< (ostream&, const path&);

  // <butl/timestamp>
  //
  using butl::system_clock;
  using butl::timestamp;
  using butl::duration;
  using butl::timestamp_unknown;
  using butl::timestamp_nonexistent;
  using butl::operator<<;

  // <butl/sha256>
  //
  using butl::sha256;

  // <butl/process>
  // <butl/fdstream>
  //
  using butl::process;
  using butl::process_path;
  using butl::process_error;

  ostream&
  operator<< (ostream&, const process_path&); // Print as recall[@effect].

  using butl::ifdstream;
  using butl::ofdstream;
}

// <build2/name>
//
#include <build2/name>

#endif // BUILD2_TYPES
