// file      : build2/config/module -*- C++ -*-
// copyright : Copyright (c) 2014-2016 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

#ifndef BUILD2_CONFIG_MODULE
#define BUILD2_CONFIG_MODULE

#include <map>
#include <algorithm> // find_if()

#include <butl/prefix-map>

#include <build2/types>
#include <build2/utility>

#include <build2/module>
#include <build2/variable>

namespace build2
{
  namespace config
  {
    // An ordered list of modules each with an ordered list of list of
    // config.* variables and their "save flags" (see save_variable()) that
    // are used (as opposed to just being specified) in this configuration.
    // Populated by the config utility functions (required(), optional())
    // and saved in the order populated.
    //
    struct saved_variable
    {
      reference_wrapper<const variable> var;
      uint64_t flags;
    };

    struct saved_variables: vector<saved_variable>
    {
      // Normally each module only have a handful of config variables and we
      // only do this during configuration so for now we do linear search
      // instead of adding a map.
      //
      const_iterator
      find (const variable& var) const
      {
        return std::find_if (
          begin (),
          end (),
          [&var] (const saved_variable& v) {return var == v.var;});
      }
    };

    struct saved_modules: butl::prefix_map<string, saved_variables, '.'>
    {
      // Priority order with INT32_MIN being the highest. Modules with the
      // same priority are saved in the order inserted.
      //
      // Generally, the idea is that we want higher-level modules at the top
      // of the file since that's the configuration that we usualy want to
      // change. So we have the following priority bands/defaults:
      //
      // 101-200/150 - code generators (e.g., yacc, bison)
      // 201-300/250 - compilers (e.g., C, C++),
      // 301-400/350 - binutils (ar, ld)
      //
      std::multimap<std::int32_t, const_iterator> order;

      iterator
      insert (string name, int prio = 0)
      {
        auto p (emplace (move (name), saved_variables ()));

        if (p.second)
          order.emplace (prio, p.first);

        return p.first;
      }
    };

    struct module: module_base
    {
      config::saved_modules saved_modules;

      static const string name; // init.cxx
      static const uint64_t version; // init.cxx
    };
  }
}

#endif // BUILD2_CONFIG_MODULE
